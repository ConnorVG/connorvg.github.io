{
  "type": "PHP",
  "name": "App\\Support\\Authorisation\\Gate",
  "content": "namespace App\\Support\\Authorisation;\n\nuse App\\Models\\{ Permission, User };\nuse Illuminate\\Contracts\\Container\\Container;\nuse Illuminate\\Support\\Collection;\n\nclass Gate\n{\n    /** @var \\Illuminate\\Contracts\\Container\\Container */\n    protected $container;\n\n    /** @var array */\n    protected $handlers;\n\n    public function __construct(Container $container, array $handlers = [])\n    {\n        $this->container = $container;\n        $this->handlers = $handlers;\n    }\n\n    public function authorise(?User $user, $abilities, array $arguments): bool\n    {\n        if ($user === null) {\n            return false;\n        }\n\n        $abilities = (array) $abilities;\n        $allowed = [];\n\n        foreach ($abilities as $ability) {\n            if ($allowed[] = $this->allow($user, explode(',', $ability), $arguments)) {\n                continue;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function allow(User $user, array $abilities, array $arguments): bool\n    {\n        foreach ($abilities as $ability) {\n            $handler = $this->getHandler($ability);\n\n            if ($handler === null) {\n                return $this->hasPermission($user, $ability);\n            }\n\n            if (! $this->container->call($this->handlers[$ability], compact('user', 'ability', 'arguments'))) {\n                continue;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    protected function getHandler($ability): ?string\n    {\n        if (isset($this->handlers[$ability])) {\n            return $this->handlers[$ability];\n        }\n\n        foreach ($this->handlers as $k => $handler) {\n            if (! str_is($ability, $k)) {\n                continue;\n            }\n\n            return $handler;\n        }\n\n        return null;\n    }\n\n    protected function hasPermission(User $user, $ability): bool\n    {\n        if (($role = $user->role) === null) {\n            return false;\n        }\n\n        if (! $role->relationLoaded('permissions')) {\n            $role->load('permissions');\n        }\n\n        return $this->filterPermissions($role->permissions, $ability)->count() > 0;\n    }\n\n    protected function filterPermissions(Collection $permissions, $ability): Collection\n    {\n        return $permissions->filter(function (Permission $permission) use ($ability) {\n            $identifiers = explode(',', $permission->identifier);\n\n            foreach ($identifiers as $identifier) {\n                $allow = $identifier === $ability ||\n                    str_is($ability, $identifier) ||\n                    str_is($identifier, $ability);\n\n                if (! $allow) {\n                    continue;\n                }\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n}"
}
